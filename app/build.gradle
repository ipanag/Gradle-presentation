task hello {
    group "Demo"
    description "Hello world"
    
    println 'Listing task hello'
    
    doLast {
        println 'Hello world!'
    }
}

task intro(dependsOn: hello) << {
//task intro(dependsOn: ['hello']) << {
    group "Demo"
    description "Introduction task"
    
    println "I'm Gradle"
}

// afterEvaluate {
//     tasks.intro.dependsOn hello
// } 



def ciBuildNumber
//ciBuildNumber = System.getenv('BUILD_NUMBER')
ciBuildNumber = System.getenv('USER')
if(ciBuildNumber == null) {
	ciBuildNumber = "local"
}



apply plugin: 'android'


android {
    compileSdkVersion 21
    buildToolsVersion "21.1.0"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    
    productFlavors {
        develop {
            applicationId "com.example.develop"
        }
        
        production {
            applicationId "com.example"
        }
    }
    
    buildTypes {
        debug {
            buildConfigField "String", "BUILD_NUMBER", "\"${ciBuildNumber}\""
        }
        
        release {
            buildConfigField "String", "BUILD_NUMBER", "\"${ciBuildNumber}\""
        }
    }


    // disable release build for flavor develop (prevent from publishing a useless variant)
    variantFilter { variant ->
        if(variant.buildType.name.equals('release') 
          && variant.getFlavors().get(0).name.equals('develop')) {
            variant.setIgnore(true);
        }
    }
    
    applicationVariants.all { variant ->
        String newName = project.name + "_" + variant.getFlavorName() + 
           "_" + variant.buildType.name + "_" + ciBuildNumber + ".apk"
        variant.outputs.get(0).setOutputFile(
           new File(variant.outputs.get(0).getOutputFile().parentFile, newName))
        
        artifacts.add('archives', variant.outputs.get(0).getOutputFile())
    }
    
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
        
        develop {
            manifest.srcFile 'dev/AndroidManifest.xml'
            java.srcDirs = ['dev/java']
        }
        
        production {
            manifest.srcFile 'prod/AndroidManifest.xml'
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
}

dependencies {
	repositories {
		mavenCentral()
	}
	
	compile fileTree(dir: 'libs', include: '*.jar')
	compile 'com.android.support:support-v4:21.0.0'
	compile 'com.google.code.gson:gson:2.3'
	
//    compile project(':libs/lib1')
    developCompile project(path: ':libs/lib1', configuration: 'developRelease')
    productionCompile project(path: ':libs/lib1', configuration: 'productionRelease')
    
//	androidTestCompile 'org.robolectric:robolectric:2.3'
}